public class com.app.test.MathUtil extends java.lang.Object
{

    public void <init>()
    {
        com.app.test.MathUtil r0;

        r0 := @this: com.app.test.MathUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List getNPermutation(int, int)
    {
        int i0, i1, $i2, $i3;
        java.util.ArrayList r0, $r5;
        java.util.List r1, r2, $r8;
        java.lang.Integer r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r6, $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0 = $r5;

        r1 = staticinvoke <com.app.test.MathUtil: java.util.List sortInt(int)>(i1);

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        r2 = staticinvoke <com.app.test.MathUtil: java.util.List random(int,int)>(i0, $i2);

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) $r6;

        $i3 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        $r8 = (java.util.List) $r7;

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r0;
    }

    private static java.util.List random(int, int)
    {
        int i0, i1, i2, i3, $i4, i5, $i6;
        java.util.ArrayList r0, $r1;
        double $d0, $d1, $d2;
        java.lang.Integer $r2, $r3;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0 = $r1;

        if i0 >= i1 goto label1;

        $i4 = i0;

        goto label2;

     label1:
        $i4 = i1;

     label2:
        i2 = $i4;

        i5 = 0;

        goto label5;

     label3:
        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = (double) i1;

        $d2 = $d0 * $d1;

        i3 = (int) $d2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $z0 = virtualinvoke r0.<java.util.ArrayList: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label4;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label4:
        i5 = i5 + 1;

     label5:
        $i6 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if $i6 < i2 goto label3;

        return r0;
    }

    public static java.util.List sortInt(int)
    {
        int i0, i1;
        java.util.ArrayList r0, $r1;
        java.lang.Integer $r2;
        java.util.List $r3;

        i0 := @parameter0: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0 = $r1;

        i1 = 0;

        goto label2;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        $r3 = staticinvoke <com.app.test.MathUtil: java.util.List sort(java.util.ArrayList)>(r0);

        return $r3;
    }

    public static java.util.List sort(java.util.ArrayList)
    {
        java.util.ArrayList r0, r1, r4, r5, r8, $r9, $r12;
        java.lang.Integer r2;
        java.util.Iterator r3, r7;
        java.util.List r6, $r13;
        int $i0;
        boolean $z0, $z3;
        java.lang.Object $r10, $r11, $r14, $r15;

        r0 := @parameter0: java.util.ArrayList;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r1 = $r9;

        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if $i0 != 1 goto label1;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        return r1;

     label1:
        r3 = virtualinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();

        goto label5;

     label2:
        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.Integer) $r10;

        $r11 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object clone()>();

        r4 = (java.util.ArrayList) $r11;

        virtualinvoke r4.<java.util.ArrayList: boolean remove(java.lang.Object)>(r2);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r5 = $r12;

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $r13 = staticinvoke <com.app.test.MathUtil: java.util.List sort(java.util.ArrayList)>(r4);

        r7 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.List) $r14;

        $r15 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object clone()>();

        r8 = (java.util.ArrayList) $r15;

        virtualinvoke r8.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r6);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

     label4:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label3;

     label5:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return r1;
    }
}
